import{_ as s,c as a,o as p,Q as o}from"./chunks/framework.2d37aa7a.js";const F=JSON.parse('{"title":"Git 补丁 patch 使用方法","description":"","frontmatter":{},"headers":[],"relativePath":"git/patch.md","filePath":"git/patch.md"}'),l={name:"git/patch.md"},n=o(`<h1 id="git-补丁-patch-使用方法" tabindex="-1">Git 补丁 patch 使用方法 <a class="header-anchor" href="#git-补丁-patch-使用方法" aria-label="Permalink to &quot;Git 补丁 patch 使用方法&quot;">​</a></h1><p>Git 的 patch 功能支持开发者通过文件与别人分享自己的改动，本文记录 patch 使用方法。</p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>在同一个 git 管理仓库下，当然直接使用 git 的常用命令可以很好地和其他开发者共享工作，当开发者不处在同一个版本管理平台下，或仅作临时修改时，则可以通过 patch 打补丁的方式共享代码改动。</p><p>Git 提供了两种补丁方案，一种是通过 <code>git diff</code> 生成的 <code>.diff</code> 文件，第二种是通过 <code>git format-patch</code> 生成的 <code>.patch</code> 文件。</p><ol><li>通过 git diff 生成的文件不含有 commit 信息，可以指定文件生成 diff，也可以指定单个 commit， 多个 commit 生成 。</li><li>通过 git format-patch 生成的 .patch 文件 含有 commit 信息。一个 commit 对应一个 patch 文件。</li></ol><h2 id="生成-patch" tabindex="-1">生成 patch <a class="header-anchor" href="#生成-patch" aria-label="Permalink to &quot;生成 patch&quot;">​</a></h2><h3 id="git-diff" tabindex="-1"><code>git diff</code> <a class="header-anchor" href="#git-diff" aria-label="Permalink to &quot;\`git diff\`&quot;">​</a></h3><p><code>patch</code> 补丁就是通过 <code>git diff</code> 生成的文本内容文件，最简单的生成方法为 <code>git diff &gt; test.patch</code>。</p><p>比如，我们修改了 <code>A.java、B.java</code> 文件，我们只想将 <code>A.java</code> 文件的修改打成 <code>patch</code>，那么我们可以使用以下的命令:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">diff</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">A.java</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test.patch</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">diff</span><span style="color:#24292E;"> </span><span style="color:#032F62;">A.java</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test.patch</span></span></code></pre></div><p>想把所有的修改文件打成 <code>patch</code>，即 <code>A.java、B.java</code> 文件，只需要使用下面的命令:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">diff</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test.patch</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">diff</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test.patch</span></span></code></pre></div><p>指定 <code>commit id</code> 生成 <code>patch</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">diff</span><span style="color:#E1E4E8;"> [commit </span><span style="color:#9ECBFF;">sha1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">id]</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> [diff文件名].patch</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">diff</span><span style="color:#24292E;"> [commit </span><span style="color:#032F62;">sha1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> [diff文件名].patch</span></span></code></pre></div><h3 id="git-format-patch" tabindex="-1"><code>git format-patch</code> <a class="header-anchor" href="#git-format-patch" aria-label="Permalink to &quot;\`git format-patch\`&quot;">​</a></h3><p>当前分支所有超前 <code>master</code> 的提交：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">format-patch</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-M</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">master</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">format-patch</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-M</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span></span></code></pre></div><p>某次提交以后的所有 <code>patch</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">format-patch</span><span style="color:#E1E4E8;"> [commit </span><span style="color:#9ECBFF;">id]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">format-patch</span><span style="color:#24292E;"> [commit </span><span style="color:#032F62;">id]</span></span></code></pre></div><p>[commit id] 指的是 commit 名,可以通过 <code>git log</code> 查看。</p><p>从第一次到指定 [commit id] 的所有 <code>patch</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">format-patch</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--root</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">e16</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">format-patch</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--root</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#032F62;">e16</span></span></code></pre></div><p>某两次提交之间的所有 patch:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">format-patch</span><span style="color:#E1E4E8;"> [commit </span><span style="color:#9ECBFF;">sha1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">id]..</span><span style="color:#E1E4E8;"> [commit </span><span style="color:#9ECBFF;">sha1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">id]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 365a 和 4e16 分别对应两次提交的名称</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">format-patch</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">365</span><span style="color:#9ECBFF;">a..4e16</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">format-patch</span><span style="color:#24292E;"> [commit </span><span style="color:#032F62;">sha1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id]..</span><span style="color:#24292E;"> [commit </span><span style="color:#032F62;">sha1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">id]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 365a 和 4e16 分别对应两次提交的名称</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">format-patch</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">365</span><span style="color:#032F62;">a..4e16</span></span></code></pre></div><p>某次提交（含）之前的几次提交：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">format-patch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">–n</span><span style="color:#E1E4E8;"> [commit </span><span style="color:#9ECBFF;">id]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># –n 指 patch 数，07fe 对应 [commit id]</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">format-patch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">–n</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">07</span><span style="color:#9ECBFF;">fe</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 单次提交即为</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">format-patch</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-1</span><span style="color:#E1E4E8;"> [commit </span><span style="color:#9ECBFF;">id]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">format-patch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">–n</span><span style="color:#24292E;"> [commit </span><span style="color:#032F62;">id]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># –n 指 patch 数，07fe 对应 [commit id]</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">format-patch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">–n</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">07</span><span style="color:#032F62;">fe</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 单次提交即为</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">format-patch</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-1</span><span style="color:#24292E;"> [commit </span><span style="color:#032F62;">id]</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ol><li><code>git format-patch</code> 生成的补丁文件默认从1开始顺序编号，并使用对应提交信息中的第一行作为文件名。</li><li>如果使用了 <code>--numbered-files</code> 选项，则文件名只有编号，不包含提交信息；</li><li>如果指定了 <code>–stdout</code> 选项，可指定输出位置，如当所有 <code>patch</code> 输出到一个文件；可指定 <code>-o</code> 指定 <code>patch</code> 的存放目录。</li></ol></div><h2 id="应用-patch" tabindex="-1">应用 patch <a class="header-anchor" href="#应用-patch" aria-label="Permalink to &quot;应用 patch&quot;">​</a></h2><h3 id="git-apply" tabindex="-1">git apply <a class="header-anchor" href="#git-apply" aria-label="Permalink to &quot;git apply&quot;">​</a></h3><p>应用 <code>git apply</code> 命令应用 <code>patch</code> 的原理是将 <code>patch</code> 中的改动添加到工作区，应用后会相当于对文件做出修改而不惊动 git。<code>git apply</code> 用于 <code>diff</code> 和 <code>format-patch</code> 输出的 <code>patch</code>。</p><h3 id="使用步骤" tabindex="-1">使用步骤 <a class="header-anchor" href="#使用步骤" aria-label="Permalink to &quot;使用步骤&quot;">​</a></h3><ol><li><p>将生成的 <code>patch</code> 文件放在需要合并代码的项目路径</p></li><li><p>先检查patch文件格式：</p></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apply</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--stat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xxx.patch</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apply</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--stat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xxx.patch</span></span></code></pre></div><ol start="3"><li>测试patch是否能应用到当前分支</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apply</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--check</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xxx.patch</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apply</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--check</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xxx.patch</span></span></code></pre></div><ol start="4"><li>应用此 <code>patch</code> 打补丁</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apply</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xxx.patch</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apply</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xxx.patch</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这种方式传递的修改将会丢失提交信息和作者信息，但可以兼容非 git 管理的代码。除此之外，git 还提供另一个命令更便于 git 库之间的 patch 传递。</p><p>过程中如果有冲突则会停止应用，报错：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">patch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">does</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apply</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">patch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">does</span><span style="color:#24292E;"> </span><span style="color:#032F62;">not</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apply</span></span></code></pre></div></div><h3 id="解决冲突" tabindex="-1">解决冲突 <a class="header-anchor" href="#解决冲突" aria-label="Permalink to &quot;解决冲突&quot;">​</a></h3><p>出现冲突的时候，这个时候需要我们手动解决冲突。</p><ol><li>首先，执行以下命令，自动合入 <code>patch</code> 中不冲突的代码，同时保留冲突的部分</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apply</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--reject</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xxxx.patch</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apply</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--reject</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xxxx.patch</span></span></code></pre></div><ol start="2"><li>同时会生成后缀为 <code>.rej</code> 的文件，保存没有合并进去的部分的内容，可以参考这个进行冲突解决。</li></ol><h3 id="git-am" tabindex="-1">git am <a class="header-anchor" href="#git-am" aria-label="Permalink to &quot;git am&quot;">​</a></h3><p><code>format-patch</code> 生成的 <code>patch</code> 保存了更多提交信息。因此除了 <code>git apply</code> 之外，还可以用更智能的 <code>git am</code> 命令使用此 <code>patch</code>，会在修改文件的同时将 <code>commit</code> 信息也一起应用到 <code>git</code> 中。</p><p><code>git am</code> 可以复现修改，保留作者信息，保留 <code>commit</code> 信息，但 <code>commit ID</code> 无法保留。</p><p><code>git am</code> 命令会在应用 <code>patch</code> 失败时给出详细的错误信息，并允许手动解决冲突，是官方较为推荐的补丁应用方式。</p><p>在使用 <code>git am</code> 之前， 需要先 <code>git am --abort</code> 一次，以放弃掉以前的 <code>am</code> 信息，不然可能会遇到这样的错误。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">.git/rebase-apply</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">still</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exists</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">but</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mbox</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">given.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">.git/rebase-apply</span><span style="color:#24292E;"> </span><span style="color:#032F62;">still</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exists</span><span style="color:#24292E;"> </span><span style="color:#032F62;">but</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mbox</span><span style="color:#24292E;"> </span><span style="color:#032F62;">given.</span></span></code></pre></div><p><code>git am</code> 可以一次合并一个文件，或者一个目录下所有的 <code>patch</code>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">am</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">.patch</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">am</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#032F62;">.patch</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>再次声明，<code>am</code> 合并的 <code>commit ID</code> 会和之前不同，因此建议在有仓库管理的情况下用 <code>git pull</code></p></div>`,53),t=[n];function e(c,i,r,d,y,h){return p(),a("div",null,t)}const g=s(l,[["render",e]]);export{F as __pageData,g as default};
